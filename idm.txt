# Import Libraries
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import matplotlib.pyplot as plt

# Step 1: Load dataset using read_csv
data = pd.read_csv('imdb_reviews.csv')

# Step 2: Keep only 'review' and 'sentiment' columns
data = data[['review', 'sentiment']]

# Step 3: Separate features (X) and target (y)
X = data['review'].values
y = data['sentiment'].values

# Step 4: Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‚ùó Step 4.1: CONVERT labels to numeric
y_train = (y_train == 'positive').astype(int)
y_test = (y_test == 'positive').astype(int)

# Step 5: Text Tokenization
tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)

# Step 6: Padding sequences
X_train_pad = pad_sequences(X_train_seq, maxlen=256, padding='post', truncating='post')
X_test_pad = pad_sequences(X_test_seq, maxlen=256, padding='post', truncating='post')

# Step 7: Build the DNN model
model = keras.Sequential([
    keras.layers.Embedding(input_dim=10000, output_dim=32, input_length=256),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

# Step 8: Compile
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 9: Train
history = model.fit(X_train_pad, y_train, epochs=10, batch_size=32, validation_split=0.2, verbose=1)

# Step 10: Evaluate
loss, accuracy = model.evaluate(X_test_pad, y_test, verbose=1)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Step 11: Plot Accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend()
plt.show()
