# Step 1: Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.preprocessing import MinMaxScaler

# Step 2: Load Dataset
data = pd.read_csv('Google_Stock_Price.csv')  # Make sure the correct CSV name

print(data.head())  # See what columns are there

# Step 3: Preprocess the Data
# We'll use 'Open' price for simplicity
open_prices = data['Open'].values
open_prices = open_prices.reshape(-1, 1)

# Normalize data to range [0,1]
scaler = MinMaxScaler()
open_prices_scaled = scaler.fit_transform(open_prices)

# Step 4: Create Sequences
X = []
y = []

# Example: Use previous 60 days to predict next day
timesteps = 60

for i in range(timesteps, len(open_prices_scaled)):
    X.append(open_prices_scaled[i-timesteps:i, 0])
    y.append(open_prices_scaled[i, 0])

X, y = np.array(X), np.array(y)

# Reshape X to 3D (samples, timesteps, features) as expected by RNN
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Step 5: Build RNN Model
model = models.Sequential([
    layers.SimpleRNN(50, activation='tanh', return_sequences=True, input_shape=(X.shape[1], 1)),
    layers.SimpleRNN(50, activation='tanh'),
    layers.Dense(1)
])

# Step 6: Compile the Model
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 7: Train the Model
history = model.fit(X, y, epochs=20, batch_size=32)

# Step 8: Predict on Training Data
predicted_stock_price = model.predict(X)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)
real_stock_price = scaler.inverse_transform(open_prices_scaled[timesteps:])

# Step 9: Plot Results
plt.plot(real_stock_price, color='red', label='Real Google Stock Price')
plt.plot(predicted_stock_price, color='blue', label='Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()
